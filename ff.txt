/*
 * dma.c
 *
 *  Created on: Dec 11, 2018
 *      Author: shubi
 */

#include "dma.h"

/**
 * @brief   DMA initialization function
 * @note    Basic initialization
 *
 * @param   DMA_Num:        1 or 2
 *          DMA_Channel:    DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 *          Peripheral_Adr: peripheral address
 *          Memory_Adr:     memory address
 *          Size:           Buffer size(no. of data to transfer)
 *          Psize:          DMA_PERIPHERAL_DATA_8BIT
 *                          DMA_PERIPHERAL_DATA_16BIT
 *                          DMA_PERIPHERAL_DATA_32BIT
 *          Msize:          DMA_MEMORY_DATA_8BIT
 *                          DMA_MEMORY_DATA_16BIT
 *                          DMA_MEMORY_DATA_32BIT
 *          Prio:           DMA_PRIORITY_LOW
 *                          DMA_PRIORITY_MEDIUM
 *                          DMA_PRIORITY_HIGH
 *                          DMA_PRIORITY_VERY_HIGH
 *          P_inc:          DMA_PERIPHERAL_INCREMENT_E
 *                          DMA_PERIPHERAL_INCREMENT_D
 *          M_inc:          DMA_MEMORY_INCREMENT_E
 *                          DMA_MEMORY_INCREMENT_D
 *          Circular_M:     DMA_CIRCULAR_MODE_E
 *                          DMA_CIRCULAR_MODE_D
 *          M2M:            DMA_M2M_E
 *                          DMA_M2M_D
 *
 * @retval  None
 */
void DMA_Init(uint8_t DMA_Num, DMA_Channel_TypeDef * DMA_Channel, const uint32_t * Peripheral_Adr, const uint32_t * Memory_Adr,const uint32_t Size,
		const uint8_t Psize,const uint8_t Msize,const uint8_t Prio,const uint8_t P_inc,const uint8_t M_inc,const uint8_t Circular_M,const uint8_t M2M)
{
  /* Enable clock for DMA1 or DM2 */
	 if(DMA_Num == 1)
	     RCC ->AHBENR |= RCC_AHBENR_DMA1EN;
	 else if(DMA_Num == 2)
			 RCC ->AHBENR |= RCC_AHBENR_DMA1EN;
 /* disable channel, since this registers must not be written when the channel is enabled */
	DMA_ChannelDisable(DMA_Channel);

 /* Set address for peripheral */
	DMA_Channel ->CPAR   = (uint32_t)Peripheral_Adr;

 /* Set address for memory */
	DMA_Channel ->CMAR   = (uint32_t)Memory_Adr;

 /* Set no. of data to transfer */
	DMA_Channel ->CNDTR  = Size;

 /* Set Peripheral size, 00: 8-bits & 01: 16-bits & 10: 32-bits & 11: Reserved */
	DMA_Channel ->CCR   &= ~DMA_CCR1_PSIZE;
	if(Psize != 0)DMA_Channel ->CCR   |= Psize;

 /* Set Memory size, 00: 8-bits & 01: 16-bits & 10: 32-bits & 11: Reserved*/
	DMA_Channel ->CCR   &= ~DMA_CCR1_MSIZE;
	if(Msize != 0)DMA_Channel ->CCR   |= Msize;

 /* Set Channel priority, 00: Low & 01: Medium & 10: High & 11: Very high */
	DMA_Channel ->CCR   &= ~DMA_CCR1_PL;
	if(Prio != 0)DMA_Channel ->CCR   |= Prio;

 /* 1:Enable/0:Disable Peripheral increment mode */
	if(P_inc == 0)DMA_Channel ->CCR   &= ~DMA_CCR1_PINC;
	else DMA_Channel ->CCR   |= DMA_CCR1_PINC;

 /* 1:Enable/0:Disable memory increment mode */
	if(M_inc == 0)DMA_Channel ->CCR   &= ~DMA_CCR1_MINC;
	else DMA_Channel ->CCR   |= DMA_CCR1_MINC;

if(M2M == 0)
{
 /* Disable M2M Mode */
	DMA_Channel ->CCR   &= ~DMA_CCR1_MEM2MEM;
 /* 1:Enable/0:Disable Circular mode*/
	if(Circular_M == 0)DMA_Channel ->CCR   &= ~DMA_CCR1_CIRC;
	else DMA_Channel ->CCR   |= DMA_CCR1_CIRC;
}
else
{
 /* Enable M2M Mode */
	DMA_Channel ->CCR   |= DMA_CCR1_MEM2MEM;
}
 /* Data transfer direction, 0: Read from peripheral , 1: Read from memory*/
	if(Circular_M == 0)DMA_Channel ->CCR   &= ~DMA_CCR1_DIR;
	else DMA_Channel ->CCR   |= DMA_CCR1_DIR;

	DMA_ChannelEnable(DMA_Channel);

	__ASM("NOP");
	__ASM("NOP");
	__ASM("NOP");
	__ASM("NOP");
	__ASM("NOP");
	__ASM("NOP");
	__ASM("NOP");
	__ASM("NOP");
}

/**
 * @brief   Enable DMA
 * @note
 * @param   DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 * @retval  None
 */
void DMA_ChannelEnable(DMA_Channel_TypeDef *DMA_Channel){
  DMA_Channel->CCR |=  DMA_CCR1_EN;
}

/**
 * @brief   Disable DMA
 * @note
 * @param   DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 * @retval  None
 */
void DMA_ChannelDisable(DMA_Channel_TypeDef *DMA_Channel){
  DMA_Channel->CCR &= ~DMA_CCR1_EN;
}
















/*
 * dma.h
 *
 *  Created on: Dec 11, 2018
 *      Author: shubi
 */

/* Define to prevent recursive inclusion */
#ifndef INC_DMA_H_
#define INC_DMA_H_

#include "stm32f10x.h"

#define DMA_PERIPHERAL_DATA_8BIT        0
#define DMA_PERIPHERAL_DATA_16BIT       (0x0100)
#define DMA_PERIPHERAL_DATA_32BIT       (0x0200)
#define DMA_MEMORY_DATA_8BIT            0
#define DMA_MEMORY_DATA_16BIT           DMA_CCR1_MSIZE_0
#define DMA_MEMORY_DATA_32BIT            ((uint16_t)0x0800)
#define DMA_PRIORITY_LOW                0
#define DMA_PRIORITY_MEDIUM             DMA_CCR1_PL_0
#define DMA_PRIORITY_HIGH               DMA_CCR1_PL_1
#define DMA_PRIORITY_VERY_HIGH          DMA_CCR1_PL
#define DMA_PERIPHERAL_INCREMENT_E      1
#define DMA_PERIPHERAL_INCREMENT_D      0
#define DMA_MEMORY_INCREMENT_E          1
#define DMA_MEMORY_INCREMENT_D          0
#define DMA_CIRCULAR_MODE_E             1
#define DMA_CIRCULAR_MODE_D             0
#define DMA_READ_FROM_PERIPHERAL        0
#define DMA_READ_FROM_MEMORY            1
#define DMA_M2M_D                       0
#define DMA_M2M_E                       1


/**
 * @brief   DMA initialization function
 * @note    Basic initialization
 *
 * @param   DMA_Num:        1 or 2
 *          DMA_Channel:    DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 *          Peripheral_Adr: peripheral address
 *          Memory_Adr:     memory address
 *          Size:           Buffer size(no. of data to transfer)
 *          Psize:          DMA_PERIPHERAL_DATA_8BIT
 *                          DMA_PERIPHERAL_DATA_16BIT
 *                          DMA_PERIPHERAL_DATA_32BIT
 *          Msize:          DMA_MEMORY_DATA_8BIT
 *                          DMA_MEMORY_DATA_16BIT
 *                          DMA_MEMORY_DATA_32BIT
 *          Prio:           DMA_PRIORITY_LOW
 *                          DMA_PRIORITY_MEDIUM
 *                          DMA_PRIORITY_HIGH
 *                          DMA_PRIORITY_VERY_HIGH
 *          P_inc:          DMA_PERIPHERAL_INCREMENT_E
 *                          DMA_PERIPHERAL_INCREMENT_D
 *          M_inc:          DMA_MEMORY_INCREMENT_E
 *                          DMA_MEMORY_INCREMENT_D
 *          Circular_M:     DMA_CIRCULAR_MODE_E
 *                          DMA_CIRCULAR_MODE_D
 *          M2M:            DMA_M2M_E
 *                          DMA_M2M_D
 * @retval  None
 */
void DMA_Init(uint8_t DMA_Num, DMA_Channel_TypeDef * DMA_Channel, const uint32_t * Peripheral_Adr, const uint32_t * Memory_Adr,const uint32_t Size,
		const uint8_t Psize, const uint8_t Msize,const uint8_t Prio,const uint8_t P_inc,const uint8_t M_inc,const uint8_t Circular_M,const uint8_t M2M);

/**
 * @brief   Enable DMA
 * @note
 * @param   DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 * @retval  None
 */
void DMA_ChannelEnable(DMA_Channel_TypeDef *DMA_Channel);

/**
 * @brief   Disable DMA
 * @note
 * @param   DMAx_Channely   where: x= 1 or 2 , y= 1 ..7 for DMA1 and 1 ..5 for DMA2
 * @retval  None
 */
void DMA_ChannelDisable(DMA_Channel_TypeDef *DMA_Channel);


#endif /* INC_DMA_H_ */




















/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2018-06-29

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes ------------------------------------------------------------------*/
#include "nvic.h"
#include "SysTick.h"
#include "exti.h"
#include "gpio.h"
#include "dma.h"
#include "memcpy.h"

/* Private typedef */
/* Private define ------------------------------------------------------------*/
/**
 * @brief   Buffer array size
 */
#define BUFFER_SIZE     ((uint32_t) 500)

/**
 * @brief   use #define USE_MEMCPY or USE_DMA
 */
#define USE_MEMCPY

/* Private macro */

/* Private variables ---------------------------------------------------------*/
/**
 * @brief   Source and destination buffers
 */
static uint32_t srcBuffer[BUFFER_SIZE];
static uint32_t dstBuffer[BUFFER_SIZE];

/* Private function prototypes */
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
	SysTick_Init();
    GPIO_OnBoard_Init_LED();

    GPIO_Init_PB();
    EXTI_Init_PB();
    NVIC_Init();

    DMA_Init(1, DMA1_Channel3, dstBuffer, srcBuffer, BUFFER_SIZE, DMA_PERIPHERAL_DATA_32BIT, DMA_MEMORY_DATA_32BIT,
    		DMA_PRIORITY_VERY_HIGH, DMA_PERIPHERAL_INCREMENT_E, DMA_MEMORY_INCREMENT_E,DMA_CIRCULAR_MODE_D,DMA_M2M_E);

    /* Clear PRIMASK, enable IRQs */
    __enable_irq();

  /* Infinite loop */
  while (1)
  {

  }
}


